// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: microservice.proto

package microservicepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HTTPMicroserviceClient is the client API for HTTPMicroservice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HTTPMicroserviceClient interface {
	Welcome(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*WelcomeResponse, error)
}

type hTTPMicroserviceClient struct {
	cc grpc.ClientConnInterface
}

func NewHTTPMicroserviceClient(cc grpc.ClientConnInterface) HTTPMicroserviceClient {
	return &hTTPMicroserviceClient{cc}
}

func (c *hTTPMicroserviceClient) Welcome(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*WelcomeResponse, error) {
	out := new(WelcomeResponse)
	err := c.cc.Invoke(ctx, "/microservice.HTTPMicroservice/Welcome", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HTTPMicroserviceServer is the server API for HTTPMicroservice service.
// All implementations must embed UnimplementedHTTPMicroserviceServer
// for forward compatibility
type HTTPMicroserviceServer interface {
	Welcome(context.Context, *emptypb.Empty) (*WelcomeResponse, error)
	mustEmbedUnimplementedHTTPMicroserviceServer()
}

// UnimplementedHTTPMicroserviceServer must be embedded to have forward compatible implementations.
type UnimplementedHTTPMicroserviceServer struct {
}

func (UnimplementedHTTPMicroserviceServer) Welcome(context.Context, *emptypb.Empty) (*WelcomeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Welcome not implemented")
}
func (UnimplementedHTTPMicroserviceServer) mustEmbedUnimplementedHTTPMicroserviceServer() {}

// UnsafeHTTPMicroserviceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HTTPMicroserviceServer will
// result in compilation errors.
type UnsafeHTTPMicroserviceServer interface {
	mustEmbedUnimplementedHTTPMicroserviceServer()
}

func RegisterHTTPMicroserviceServer(s grpc.ServiceRegistrar, srv HTTPMicroserviceServer) {
	s.RegisterService(&HTTPMicroservice_ServiceDesc, srv)
}

func _HTTPMicroservice_Welcome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPMicroserviceServer).Welcome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microservice.HTTPMicroservice/Welcome",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPMicroserviceServer).Welcome(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// HTTPMicroservice_ServiceDesc is the grpc.ServiceDesc for HTTPMicroservice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HTTPMicroservice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "microservice.HTTPMicroservice",
	HandlerType: (*HTTPMicroserviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Welcome",
			Handler:    _HTTPMicroservice_Welcome_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "microservice.proto",
}
